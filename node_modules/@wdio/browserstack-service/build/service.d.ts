export default class BrowserstackService {
    constructor(options: {} | undefined, caps: any, config: any);
    config: any;
    sessionBaseUrl: string;
    failReasons: any[];
    scenariosThatRan: any[];
    preferScenarioName: boolean;
    strict: boolean;
    failureStatuses: string[];
    caps: any;
    beforeSession(config: any): void;
    before(): Promise<void>;
    beforeSuite(suite: any): any;
    fullTitle: any;
    beforeFeature(uri: any, feature: any): any;
    afterTest(test: any, context: any, results: any): void;
    after(result: any): any;
    afterScenario(uri: any, feature: any, pickle: any, results: any): void;
    onReload(oldSessionId: any, newSessionId: any): Promise<void>;
    _updateJob(requestBody: any): any;
    _multiRemoteAction(action: any): any;
    _update(sessionId: any, requestBody: any): import("got/dist/source").CancelableRequest<import("got/dist/source").Response<string>>;
    _printSessionURL(): Promise<void>;
}
//# sourceMappingURL=service.d.ts.map